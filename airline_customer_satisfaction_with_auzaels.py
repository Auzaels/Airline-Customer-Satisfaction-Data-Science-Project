# -*- coding: utf-8 -*-
"""airline_customer_satisfaction_with_auzaels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iBIjJKQ5xgzBQR02gqIR6ix7BPfwReEk

In the project, there is a dataset that provides information about customer satisfaction levels at an unnamed airline. And based on various parameters in this dataset, we aim to develop a machine learning model that predicts whether future customers will be satisfied or not.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

pd.set_option('display.max_columns',None)
pd.set_option('display.width',500)

df = pd.read_csv("Airline_customer_satisfaction.csv")
print(df.info())

print(df.shape)

print(df.describe().T)

#Cat Col
cat_col = [col for col in df.columns if str(df[col].dtypes) in ["object"]]
print("Categorical Columns:", cat_col)

#Num Col
num_col = [col for col in df.columns if df[col].nunique() and df[col].dtypes in ["int64","float64"]]
print("Numeric Columns:", num_col)

cat_cols = cat_col + num_col
print("All Columns:", cat_cols)

# Missing Value
df.isnull().any()

df.isnull().sum()

for col in num_col:
  if df[col].isnull().any():
    df[col].fillna(df[col].mean(), inplace=True)
print("The gaps were filled with averages.")

# Outlier Analysis
def remove_outlier(df, column):
    q1 = df[column].quantile(0.25)
    q3 = df[column].quantile(0.75)
    IQR = q3 - q1
    low = q1 - 1.5 * IQR
    high = q3 + 1.5 * IQR

    # Suppression
    df.loc[df[column] < low, column] = low
    df.loc[df[column] > high, column] = high

    return df

for col in num_col:
    df = remove_outlier(df, col)

print("Outliers Suppressed.")

df.isnull().sum()

plt.figure(figsize=(10, 6))
sns.histplot(df["Age"], kde=True, color="blue")
plt.title("Total Age Distribution")
plt.xlabel("Age")
plt.ylabel("Number of People")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="Type of Travel", y="Age")
plt.title("Age Distribution by Type of Travel")
plt.xlabel("Type of Travel")
plt.ylabel("Age")
plt.show()

plt.figure(figsize=(10,6))
  sns.countplot(data=df, x='satisfaction', hue='satisfaction', palette='viridis', legend=False)
  plt.title("Total Satisfied or Dissatisfied Table")
  plt.xlabel("Satisfied or Satisfied")
  plt.ylabel("Number of People")
  plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x="Customer Type", hue="satisfaction")
plt.title("Satisfaction by Customer Type")
plt.xlabel("Customer Type")
plt.ylabel("Number of People")
plt.legend(title='Satisfaction')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x="Class", hue="satisfaction")
plt.title("Satisfaction by Class")
plt.legend(title='Satisfaction')
plt.xlabel("Class")
plt.ylabel("Number of People")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="satisfaction", y="Seat comfort")
plt.title("Satisfaction by Seat Comfort")
plt.xlabel("Satisfaction")
plt.ylabel("Seat Comfort (0 to 5)")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="satisfaction", y="Inflight entertainment")
plt.title("Satisfaction by Inflight Entertainment")
plt.xlabel("Satisfaction")
plt.ylabel("Inflight Entertainment (0 to 5)")
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='Class', hue='Type of Travel', palette='viridis')
plt.title('Class by Type of Travel')
plt.xlabel('Type of Travel and Class')
plt.ylabel('Number Of People')
plt.legend(title='Type of Travel')
plt.show()

df["satisfaction"] = df["satisfaction"].map({"satisfied":0,"dissatisfied":1})
df["Customer Type"] = df["Customer Type"].map({"Loyal Customer":0,"disloyal Customer":1})
df["Type of Travel"] = df["Type of Travel"].map({"Personal Travel":0,"Business travel":1})
df["Class"] = df["Class"].map({"Eco":0,"Eco Plus":1,"Business":2})

print(df.info())

# Age grouping
bins = [0, 10, 20, 40, 60, float('inf')]
labels = ['Child', 'Young', 'Young Adult', 'Adult', 'Elderly']
df['Age_Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

df["Age_Group"] = pd.Categorical(df["Age_Group"], categories=labels, ordered=True)
df["Age_Group"] = df["Age_Group"].cat.codes
df["Age_Group"] = df["Age_Group"].astype('int64')

# Service Total
service_columns = ['Seat comfort', 'Departure/Arrival time convenient', 'Food and drink',
                   'Gate location', 'Inflight wifi service', 'Inflight entertainment',
                   'Online support', 'Ease of Online booking', 'On-board service',
                   'Leg room service', 'Baggage handling', 'Checkin service',
                   'Cleanliness', 'Online boarding']
df['Service_Total'] = df[service_columns].mean(axis=1)

print(df.info())
print(df.head())

X = df.drop('satisfaction', axis=1).dropna()
y = df.loc[X.index, 'satisfaction']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(random_state=42, max_iter=10000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"DoÄŸruluk Skoru: {accuracy}")

print(model.feature_names_in_)

new_data = pd.DataFrame({
    'Customer Type': [2],
    'Age': [50],
    'Type of Travel': [2],
    'Class': [2],
    'Flight Distance': [1500],
    'Seat comfort': [3],
    'Departure/Arrival time convenient': [4],
    'Food and drink': [4],
    'Gate location': [4],
    'Inflight wifi service': [4],
    'Inflight entertainment': [4],
    'Online support': [4],
    'Ease of Online booking': [34],
    'On-board service': [3],
    'Leg room service': [3],
    'Baggage handling': [3],
    'Checkin service': [5],
    'Cleanliness': [5],
    'Online boarding': [3],
    'Departure Delay in Minutes': [10],
    'Arrival Delay in Minutes': [5],
    'Age_Group': [3],
    'Service_Total': [4]
})

new_data = new_data[model.feature_names_in_]

new_pred = model.predict(new_data)

pred = 'Satisfied' if new_pred[0] == 0 else 'Dissatisfied'

print(f"Pred: {pred}")